{"ast":null,"code":"import _objectSpread from \"/Users/mumukshmeghwal/Desktop/demo/compaignManagementApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/mumukshmeghwal/Desktop/demo/compaignManagementApp/src/components/DashBoard/components/Table/Table.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Popup from 'reactjs-popup';\nimport Calendar from 'react-calendar';\nimport { createNewItemAction } from './action';\nimport Text from '../../../common/Text';\nimport CampaignRow from '../Row';\nimport { CompaignContainer } from './Table.style';\nimport { composeDate } from '../../../../core/utils';\n\nclass CampaignTable extends React.Component {\n  constructor() {\n    super();\n\n    this.closeModal = () => {\n      this.setState({\n        isScheduleOpen: false\n      }, () => document.body.removeAttribute('style'));\n    };\n\n    this.onChangeDate = date => {\n      const _this$props = this.props,\n            addNewCompaign = _this$props.addNewCompaign,\n            campaignsData = _this$props.campaignsData;\n      const selectedIndex = this.state.selectedIndex;\n      this.setState({\n        date\n      }, () => {\n        this.closeModal();\n        const selectedCampaign = campaignsData.find((_item, itemIndex) => itemIndex === selectedIndex);\n        addNewCompaign(_objectSpread({}, selectedCampaign, {\n          date: new Date(date).getTime()\n        }));\n      });\n    };\n\n    this.state = {\n      isScheduleOpen: false,\n      date: new Date(),\n      selectedIndex: undefined\n    };\n    this.getCompaignData = this.getCompaignData.bind(this);\n  }\n\n  getCompaignData() {\n    const _this$props2 = this.props,\n          campaignsData = _this$props2.campaignsData,\n          showCampaignType = _this$props2.showCampaignType;\n\n    switch (showCampaignType) {\n      case 'future':\n        return campaignsData.filter(({\n          date\n        }) => {\n          return composeDate(date).formattedDate !== composeDate().formattedDate && composeDate(date).date.getTime() > composeDate().date.getTime();\n        });\n\n      case 'live':\n        return campaignsData.filter(({\n          date\n        }) => composeDate(date).formattedDate === composeDate().formattedDate);\n\n      case 'past':\n        return campaignsData.filter(({\n          date\n        }) => {\n          return composeDate(date).formattedDate !== composeDate().formattedDate && composeDate(date).date.getTime() < composeDate().date.getTime();\n        });\n\n      default:\n        return campaignsData;\n    }\n  }\n\n  render() {\n    const _this$props3 = this.props,\n          className = _this$props3.className,\n          showCampaignType = _this$props3.showCampaignType;\n    const tableHeads = ['Date', 'Campaign', 'View', 'Actions'];\n    const filteredCampaignData = this.getCompaignData();\n    const actionElements = [{\n      name: 'CSV',\n      image: 'images/csv.png'\n    }, {\n      name: 'Report',\n      image: 'images/report.png'\n    }, {\n      name: 'Schdeule Again',\n      image: 'images/schedule.png',\n      onClick: index => this.setState({\n        isScheduleOpen: true,\n        isInfo: false,\n        selectedIndex: index\n      })\n    }];\n    return React.createElement(CompaignContainer, {\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, !filteredCampaignData.length ? React.createElement(Text, {\n      text: \"no data found\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }) : React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, tableHeads.map((tableHead, index) => React.createElement(\"th\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, tableHead)))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, filteredCampaignData.map((campaign, index) => React.createElement(CampaignRow, Object.assign({\n      actionElements: actionElements,\n      showCampaignType: showCampaignType\n    }, campaign, {\n      index: index,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }))))), React.createElement(Popup, {\n      open: this.state.isScheduleOpen,\n      closeOnDocumentClick: true,\n      onClose: this.closeModal,\n      position: \"center center\",\n      modal: true,\n      lockScroll: true,\n      closeOnEscape: true,\n      repositionOnResize: true,\n      className: \"modal-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Calendar, {\n      onChange: this.onChangeDate,\n      value: this.state.date,\n      minDate: new Date(),\n      className: \"datepicker-component\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport const mapDispatchToProps = dispatch => ({\n  addNewCompaign: payload => dispatch(createNewItemAction(payload))\n});\nCampaignTable.defaultProps = {\n  className: ''\n};\nexport default connect(null, mapDispatchToProps)(CampaignTable);","map":{"version":3,"sources":["/Users/mumukshmeghwal/Desktop/demo/compaignManagementApp/src/components/DashBoard/components/Table/Table.js"],"names":["React","connect","Popup","Calendar","createNewItemAction","Text","CampaignRow","CompaignContainer","composeDate","CampaignTable","Component","constructor","closeModal","setState","isScheduleOpen","document","body","removeAttribute","onChangeDate","date","props","addNewCompaign","campaignsData","selectedIndex","state","selectedCampaign","find","_item","itemIndex","Date","getTime","undefined","getCompaignData","bind","showCampaignType","filter","formattedDate","render","className","tableHeads","filteredCampaignData","actionElements","name","image","onClick","index","isInfo","length","map","tableHead","campaign","mapDispatchToProps","dispatch","payload","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport Popup from 'reactjs-popup';\nimport Calendar from 'react-calendar';\n\nimport { createNewItemAction } from './action';\nimport Text from '../../../common/Text';\nimport CampaignRow from '../Row';\n\nimport {CompaignContainer} from './Table.style';\n\nimport { composeDate } from '../../../../core/utils';\n\nclass CampaignTable extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isScheduleOpen: false,\n      date: new Date(),\n      selectedIndex: undefined,\n    };\n    this.getCompaignData = this.getCompaignData.bind(this);\n  }\n\n  closeModal = () => {\n    this.setState({\n      isScheduleOpen: false,\n    }, () => document.body.removeAttribute('style'));\n  };\n\n  onChangeDate = date => {\n    const { addNewCompaign, campaignsData } = this.props;\n    const { selectedIndex } = this.state;\n    this.setState({\n      date,\n    }, () => {\n      this.closeModal();\n      const selectedCampaign = campaignsData.find((_item, itemIndex) => itemIndex === selectedIndex);\n      addNewCompaign({\n        ...selectedCampaign,\n        date: (new Date(date)).getTime(),\n      });\n    });\n  }\n\n  getCompaignData () {\n    const { campaignsData, showCampaignType} = this.props;\n    switch(showCampaignType) {\n      case 'future':\n        return campaignsData.filter(({date}) => {\n          return composeDate(date).formattedDate !== composeDate().formattedDate && composeDate(date).date.getTime() > composeDate().date.getTime()\n        });\n      case 'live':\n        return campaignsData.filter(({date}) => composeDate(date).formattedDate === composeDate().formattedDate);\n      case 'past':\n          return campaignsData.filter(({date}) => {\n            return composeDate(date).formattedDate !== composeDate().formattedDate && composeDate(date).date.getTime() < composeDate().date.getTime()\n          });\n      default:\n        return campaignsData;\n    }\n  }\n\n\n  render() {\n    const { className, showCampaignType } = this.props;\n    const tableHeads = ['Date', 'Campaign', 'View', 'Actions'];\n    const filteredCampaignData = this.getCompaignData();\n\n    const actionElements = [\n      {\n        name: 'CSV',\n        image: 'images/csv.png',\n      },\n      {\n        name: 'Report',\n        image: 'images/report.png',\n      },\n      {\n        name: 'Schdeule Again',\n        image: 'images/schedule.png',\n        onClick: index =>\n          this.setState({\n            isScheduleOpen: true,\n            isInfo: false,\n            selectedIndex: index,\n          }),\n      },\n    ];\n\n    return (\n      <CompaignContainer className={className}>\n        {!filteredCampaignData.length ? (\n          <Text text=\"no data found\" />\n        ) : (\n          <table>\n            <thead>\n              <tr>\n                {tableHeads.map((tableHead, index) => (\n                  <th key={index}>{tableHead}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {filteredCampaignData.map((campaign, index) => (\n                <CampaignRow\n                  actionElements={actionElements}\n                  showCampaignType={showCampaignType}\n                  {...campaign}\n                  index={index}\n                  key={index}\n                />\n              ))}\n            </tbody>\n          </table>\n        )}\n        <Popup\n          open={this.state.isScheduleOpen}\n          closeOnDocumentClick\n          onClose={this.closeModal}\n          position=\"center center\"\n          modal\n          lockScroll\n          closeOnEscape\n          repositionOnResize\n          className=\"modal-container\"\n        >\n          <div className=\"modal\">\n            <Calendar\n              onChange={this.onChangeDate}\n              value={this.state.date}\n              minDate={new Date()}\n              className='datepicker-component'\n            />\n          </div>\n        </Popup>\n      </CompaignContainer>\n    );\n  }\n}\n\nexport const mapDispatchToProps = dispatch => ({\n  addNewCompaign: payload => dispatch(createNewItemAction(payload)),\n});\n\nCampaignTable.defaultProps = {\n  className: '',\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(CampaignTable);\n"]},"metadata":{},"sourceType":"module"}